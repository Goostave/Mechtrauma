--[[
Hook.Add("mechtraumaPanel.Always", "examples.Mechtrauma", function(effect, deltaTime, item, targets, worldPosition)
   
    item.GetComponentString("PowerTransfer").CanTransfer = false
    local color = item.GetSpriteColor()
    print(" REJOICE! Hook - mechtraumaPanel.Always Happened! Our color is: ", color)
end)


    item.GetComponentString("PowerTransfer").isBroken = true
    item.GetComponentString("PowerTransfer").powerLoad = 0
    item.GetComponentString("PowerTransfer").currPowerConsumption = 0
    print(item.GetComponentString("PowerTransfer").isBroken)
    print(item.GetComponentString("PowerTransfer").powerLoad)
    print(item.GetComponentString("PowerTransfer").currPowerConsumption)
    item.GetComponentString("PowerTransfer").SetAllConnectionsDirty()
    item.GetComponentString("PowerTransfer").recipientsToRefresh.Clear()
    


     if connection.Name == "POWER" then
            connection.Item.SendSignal(tostring(0), "output")
        end



    failed
 connection.Save(connection.SaveToXElement(ConnectionPanel <ConnectionPanel>))
    connection.RefreshRecipients()

      connection.Save(connection, parentElement)
        item.GetComponentString("PowerTransfer").recipientsToRefresh.Clear()

item1.Connections[1].ConnectWire(item.GetComponentString("Wire"))
 Wire
        connection.ConnectWire(item.GetComponentString("Wire"))
           
          print(connection.Wire)    
]]

LuaUserData.MakeFieldAccessible(Descriptors["Barotrauma.Items.Components.PowerTransfer"], "isBroken")
LuaUserData.MakeFieldAccessible(Descriptors["Barotrauma.Items.Components.PowerTransfer"], "currPowerConsumption")
LuaUserData.MakeFieldAccessible(Descriptors["Barotrauma.Items.Components.PowerTransfer"], "powerLoad")
LuaUserData.MakeMethodAccessible(Descriptors["Barotrauma.Items.Components.Connection"], "set_IsPower")
LuaUserData.MakeMethodAccessible(Descriptors["Barotrauma.Items.Components.PowerTransfer"], "RefreshConnections")
LuaUserData.MakeMethodAccessible(Descriptors["Barotrauma.Items.Components.PowerTransfer"], "RemoveComponentSpecific")
LuaUserData.MakeFieldAccessible(Descriptors["Barotrauma.Items.Components.Connection"], "recipientsDirty")
LuaUserData.MakeFieldAccessible(Descriptors["Barotrauma.Items.Components.Pump"], "currFlow")


Hook.Add("mechtraumaPanelNoFuse.Always", "examples.Mechtrauma", function(effect, deltaTime, item, targets, worldPosition)
    
    for k, connection in pairs(item.Connections) do
        print(connection, connection.IsPower)
        connection.set_IsPower(false)        
        connection.recipientsDirty = true
         
    end

    
    item.GetComponentString("PowerTransfer").powerLoad = 0
    item.GetComponentString("PowerTransfer").currPowerConsumption = 0
    item.GetComponentString("PowerTransfer").SetAllConnectionsDirty()  
    item.GetComponentString("PowerTransfer").UpdateBroken(1, nil)

end)



Hook.Add("mechtraumaPanelyesFuse.Always", "examples.Mechtrauma", function(effect, deltaTime, item, targets, worldPosition)
   
    for k, connection in pairs(item.Connections) do
        print(connection, connection.IsPower)
        connection.set_IsPower(true)        
    end
   
    item.GetComponentString("PowerTransfer").SetAllConnectionsDirty()
    item.GetComponentString("PowerTransfer").RefreshConnections()
    item.GetComponentString("PowerTransfer")local color = item.GetSpriteColor()
    
end)



if itemBuffer[1] ~= nil then
    local gateCondition = (tonumber(itemBuffer[1]) or 0)
    local flowPercentage = connection.Item.GetComponentString("Pump").flowPercentage
    local currFlow = connection.Item.GetComponentString("Pump").currFlow
    local target
    itemBuffer[1] = nil
    gateCondition = gateCondition * 0.01
    nf = cf * gateCondition
    print("gateCondition", gateCondition )
    print("currFlow", cf)
    print(nf)
    connection.Item.GetComponentString("Pump").flowPercentage = nf






    -- THE INFAMOUS TAGGING NIGHTMARE.... WHY STATUS EFFECT TAGS AND ITEM TAGS ARE STORED TOGETHER? WHY!?!?
    function Split(s, delimiter)
        result = {};
        for match in (s..delimiter):gmatch("(.-)"..delimiter) do
            table.insert(result, match);
        end
        return result;
    end
    
    LuaUserData.MakeFieldAccessible(Descriptors["Barotrauma.Items.Components.Pump"], "currFlow")
    
    --If originalMaxFlow hasn't been set,
    --if originalMaxFlow == nil then originalMaxFlow = connection.Item.GetComponentString("Pump").MaxFlow

    
    -- Store tags locally and convert to table.
    local tagTable = Split(connection.Item.Tags, ",")

    -- Check if the tagstring contains a tag that starts with maxFlow 
    print("tag string:", connection.Item.Tags)
    if connection.Item.HasTag(), "maxFlow") then
       print("MaxFlow present")
        --Loop through the tag table
        for k, v in pairs(tagTable) do
            
            --If the first 7 match maxFlow, grab the remaining characters
        print("tag in table", v)
            if string.sub(v,1,7) == "maxFlow" then
                originalMaxFlow = string.sub(v,8,-1)
              print("originalMaxFlow:", originalMaxFlow)
            end
        end
    else
      print("MaxFlow NOT present")
        
        -- Set the originalMaxFlow
        originalMaxFlow = connection.Item.GetComponentString("Pump").MaxFlow
      
        -- Create and add the maxFlow tag
        local maxFlowTag = ",maxFlow" .. connection.Item.GetComponentString("Pump").MaxFlow
        connection.Item.AddTag(maxFlowTag)
        --connection.Item.Tags = connection.Item.Tags .. maxFlowTag
    
    end